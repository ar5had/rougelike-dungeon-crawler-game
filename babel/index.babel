// React component model
// App
// --Panel
// --Game
var App = React.createClass({
	render: function() {
		return (
			<div className="app container" >
				<Panel />
				<Game />
			</div>
		);
	}
});

var Panel = React.createClass({
	render: function() {
		return (<div className="gamePanel" >
			<div className="col-xs-12 text-center"><h3 id="logo">Roguelike Dungeon Crawler Game</h3></div>
				<div className="col-xs-12">
					<div className="col-xs-3 text-center">
						Health: <span className="health">10</span>
					</div>
					<div className="col-xs-3 text-center">
						Weapon: <span className="weapon">Pistol</span>
					</div>
					<div className="col-xs-3 text-center">
						Attack: <span className="attack">20</span>
					</div>
					<div className="col-xs-3 text-center">
						level: <span className="level">3</span>
					</div>
				</div>
		</div>);
	}
});

var Game = React.createClass({
	getInitialState: function() {
		var levels = this.createLevel();
		return {levels: levels, currentLevel: 0};
	},
	createLevel: function() {
		//51*26
var levels = [
[
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
  [0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
  [0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
  [0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,0,0,0,0],
  [0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,1,0,0,0,0],
  [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],
  [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],
  [0,0,0,0,1,0,0,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0],
  [0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0],
  [0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0],
  [0,0,0,0,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0],
  [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
  [0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
  [0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
  [0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
  [0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0],
  [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0],
  [0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0],
  [0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0],
  [0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0],
  [0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0],
  [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
  [0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,9,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
]
];
		
		levels.push([]);
		levels[0].forEach(function(arr) {
			levels[1].push(arr.slice(0).reverse());
		});
		
		levels.push([]);
		for (var k = levels[1]["length"] - 1; k >= 0; k--) {
			levels[2].push( (levels[1][k]).slice(0) );
		}
		return this.createActors(levels);
 },
	createActors: function(levelsArr) {
		var levels = levelsArr.slice(0);
		levels = levels.map(function(arr, k){
			var level = arr.slice(0);
			var hc = 7, ec = 7, wc = 7, gc = 1,
							h = true, e = true, w = true, b = true, g = true;
			
			for(var i = 0; i < level.length; i++){
				h = true, e = true, w = true, g = true;
				for(var j = 0; j < level[0].length; j++){
					
					if(Math.random() > .95 && h && level[i][j] === 1 && hc > 0 && (hc < 3 ? i > 15: true)) {
						level[i][j] = 2;
						hc --;
						h = false;
					}
					
					else if(Math.random() < .05 && e && level[i][j] === 1 && ec > 0 && (hc < 3 ? i > 15: true)) {
						level[i][j] = 3;
						ec --;
						e = false;
					}
					
					else if(Math.random() > .95 && w && level[i][j] === 1 && wc > 0 && (i > 14 || i < 5)) {
						level[i][j] = 4;
						wc --;
						w = false;
					}
					
				else if(Math.random() > .95 && g && level[i][j] === 1 && gc > 0 && (i > 15 && j > 30)) {
					level[i][j] = 5;
					g = false;
					gc--;
				}
				
				if(k === 2 && b && level[i][j] === 1 && Math.random() < .02 && (i>10 && i < 13))
					level[i][j] = 6, b = false;
				}
			}
			
			return level;
		});
		return levels;
	},
	componentDidMount: function() {
		ReactDOM.findDOMNode(this).addEventListener('nv-event', this.eventHandler);
	},
	getClassNames : function(str, elem) {
		var newClass = "";
		if (elem === 0)
			newClass = " wall";
		else if (elem === 1)
			newClass = " movable";
		else if (elem === 2)
			newClass = " healthb";
		else if (elem === 3)
			newClass = " enemyb";
		else if (elem === 4)
			newClass = " weaponb";
		else if (elem === 5)
			newClass = " gate";
		else if (elem === 6)
			newClass = " boss";
		else if (elem === 9)
			newClass = " player";
	
		return str + newClass;
	},
	eventHandler: function() {
		var arrowCodes = {37: "left", 38: "up", 39: "right", 40: "down"};
	},
	render: function(){
		var level = [], arr = [];
		for (var i = 0; i < this.state.levels[this.state.currentLevel]["length"]; i++) {
			arr = [];
			for (var j = 0; j < this.state.levels[this.state.currentLevel][0]["length"]; j++) {				
				var elem = this.state.levels[this.state.currentLevel][i][j];
				arr.push(<td className={this.getClassNames("block",  elem)} />);
			}
			level.push(<tr className="levelRow">{arr}</tr>);
		}
		return (
			<div className="gameContainer">
				<table className="game text-center">
					{level}
				</table>
			</div>
		);
	}
});


ReactDOM.render(<App />, document.getElementById("app"));

